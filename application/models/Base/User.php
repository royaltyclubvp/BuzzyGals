<?php

/**
 * Model_Base_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property blob $password
 * @property timestamp $created
 * @property timestamp $modified
 * @property integer $status
 * @property timestamp $lastLogin
 * @property integer $accessFailures
 * @property integer $usergroup
 * @property Model_Usergroup $Usergroup
 * @property Doctrine_Collection $Articlecomment
 * @property Doctrine_Collection $Followedarticle
 * @property Doctrine_Collection $Followedtopic
 * @property Doctrine_Collection $Friendrequest
 * @property Doctrine_Collection $Friendrequest_2
 * @property Doctrine_Collection $Friendship
 * @property Doctrine_Collection $Friendship_2
 * @property Doctrine_Collection $Messages
 * @property Doctrine_Collection $Profile
 * @property Doctrine_Collection $Recipient
 * @property Doctrine_Collection $Userstory
 * @property Doctrine_Collection $Userstorycomment
 * 
 * @package    ElleFab
 * @subpackage Data Access Layer
 * @author     Royalty Club - Jarrod Placide-Raymond <royaltyclubvp@royalty-club.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Model_Base_User extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('username', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('password', 'string', 60, array(
             'type' => 'string',
             'length' => 60,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('created', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => date('Y-m-d H:i:s'),
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('modified', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => date('Y-m-d H:i:s'),
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('enabled', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('lastLogin', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('accessFailures', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('usergroup', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('verificationcode', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('verified', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Model_Usergroup as Usergroup', array(
             'local' => 'usergroup',
             'foreign' => 'id'));

        $this->hasMany('Model_Articlecomment as Articlecomments', array(
             'local' => 'id',
             'foreign' => 'user'));

        $this->hasMany('Model_Followedarticle as Followedarticles', array(
             'local' => 'id',
             'foreign' => 'user'));

        $this->hasMany('Model_Followedtopic as Followedtopics', array(
             'local' => 'id',
             'foreign' => 'user'));

        $this->hasMany('Model_Friendrequest as IncomingFriendRequests', array(
             'local' => 'id',
             'foreign' => 'requestee'));

        $this->hasMany('Model_Friendrequest as OutgoingFriendRequests', array(
             'local' => 'id',
             'foreign' => 'requestor'));

        $this->hasMany('Model_Friendship as Friended', array(
             'local' => 'id',
             'foreign' => 'friend'));

        $this->hasMany('Model_Friendship as Friends', array(
             'local' => 'id',
             'foreign' => 'user'));

        $this->hasMany('Model_Messages as Messages', array(
             'local' => 'id',
             'foreign' => 'sender'));

        $this->hasOne('Model_Profile as Profile', array(
             'local' => 'id',
             'foreign' => 'user'));

        $this->hasMany('Model_Recipient as Recipient', array(
             'local' => 'id',
             'foreign' => 'user'));

        $this->hasMany('Model_Userstory as Stories', array(
             'local' => 'id',
             'foreign' => 'user'));

        $this->hasMany('Model_Userstorycomment as StoryComments', array(
             'local' => 'id',
             'foreign' => 'user'));
        $this->hasMany('Model_Resource as BookmarkedResources', array(
             'local' => 'user',
             'foreign' => 'resource',
             'refClass' => 'Model_Bookmarkedresource'));
    }
}